{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Trilogy",
	"patterns": [
		{
			"include": "#statement"
		},
		{
			"include": "#expression"
		}
	],
	"repository": {
		"statement": {
			"patterns": [
				{
					"include": "#import"
				},
				{
					"include": "#datasource-declaration"
				},
								{
					"include": "#concept-declaration"
				},
				{
					"include": "#statement-keyword"
				},
				{
					"include": "#assignment-operator"
				},
								{
					"include": "#assignment-operator"
				}
			]
		},
		"import": {
			"comment": "Import statements used to correctly mark `from`, `import`, and `as`\n",
			"patterns": [
				{
					"begin": "\\b(?<!\\.)(from)\\b(?=.+import)",
					"end": "$|(?=import)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.import.trilogy"
						}
					},
					"patterns": [
						{
							"name": "punctuation.separator.period.trilogy",
							"match": "\\.+"
						},
						{
							"include": "#expression"
						}
					]
				},
				{
					"begin": "\\b(?<!\\.)(import)\\b",
					"end": "$",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.import.trilogy"
						}
					},
					"patterns": [
						{
							"name": "keyword.control.import.trilogy",
							"match": "\\b(?<!\\.)as\\b"
						},
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"assignment-operator": {
			"name": "keyword.operator.assignment.trilogy",
			"match": "(?x)\n     <<= | >>= | //= | \\*\\*=\n    | \\+= | -= | /= | @=\n    | \\*= | %= | ~= | \\^= | &= | \\|=\n    | =(?!=)\n"
		},
		"concept-declaration": {
			"name": "meta.function.trilogy",
			"patterns": [{
			"begin": "(?x)\n  \\s*\n  \\b(auto|property|metric|key)\\s+\n    (?=\n    [[:alpha:]_][[:word:]]* \\s* [[:alpha:]_][[:word:]]*    )\n",
			"end": "(:|(?=[#'\"\\n]))",
			"beginCaptures": {
				"1": {
					"name": "storage.type.trilogy"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.section.function.begin.trilogy"
				}
			},
			"patterns": [
				{
					"include": "#grain-def-name"
				},
				{
					"include": "#function-def-name"
				},
				{
					"include": "#parameters"
				},
				{
					"include": "#line-continuation"
				}
			]
		},{
			"begin": "(?x)\n  \\s*\n  \\b(auto|property|metric|key)\\s+\n    (?=\n    <\\S+>\\.[[:alpha:]_][[:word:]]* \\s* [[:alpha:]_][[:word:]]*    )\n",
			"end": "(;)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.trilogy"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.section.function.begin.trilogy"
				}
			},
			"patterns": [
				{
					"include": "#concept-list"
				},
				{
					"include": "#grain-def-name"
				},
				{
					"include": "#function-def-name"
				},
				{
					"include": "#parameters"
				},
				{
					"include": "#line-continuation"
				}
			]
		}]
		},
		"comments": {
			"patterns": [
				{
					"begin": "#",
					"end": "\\n",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment"
						}
					},
					"name": "comment.line.hash"
				}
			]
		},
		"select-statement": {
			"name": "meta.function.trilogy",
			"begin": "(?x)\n  \\s*\n  (?:\\b(async) \\s+)? \\b(select)\\s+\n    (?=\n    [[:alpha:]_][[:word:]]* \\s* \\(\n    )\n",
			"end": "(;)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.select.async.trilogy"
				},
				"2": {
					"name": "storage.type.select.trilogy"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.section.function.begin.trilogy"
				}
			},
			"patterns": [
				{
					"include": "#function-def-name"
				},
				{
					"include": "#parameters"
				},
				{
					"include": "#line-continuation"
				}
			]
		},
		"datasource-declaration": {
			"name": "meta.function.trilogy",
			"begin": "(?x)\n  \\s*\n  (?:\\b(async) \\s+)? \\b(datasource)\\s+\n    (?=\n    [[:alpha:]_][[:word:]]* \\s* \\(\n    )\n",
			"end": "(;)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.async.trilogy"
				},
				"2": {
					"name": "storage.type.function.trilogy"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.section.function.begin.trilogy"
				}
			},
			"patterns": [
				{
					"include": "#function-def-name"
				},
				{
					"include": "#parameters"
				},
				{
					"include": "#line-continuation"
				}
			]
		},
		"bind-annotation": {
			"begin": "(->)",
			"end": "(?=:)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.annotation.result.trilogy"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"statement-keyword": {
			"patterns": [
				{
					"name": "storage.type.function.trilogy",
					"match": "\\b((async\\s+)?\\s*def)\\b"
				},
				{
					"name": "keyword.control.flow.trilogy",
					"comment": "if `as` is eventually followed by `:` or line continuation\nit's probably control flow like:\n    with foo as bar, \\\n         Foo as Bar:\n      try:\n        do_stuff()\n      except Exception as e:\n        pass\n",
					"match": "\\b(?<!\\.)as\\b(?=.*[:\\\\])"
				},
				{
					"name": "keyword.control.import.trilogy",
					"comment": "other legal use of `as` is in an import",
					"match": "\\b(?<!\\.)as\\b"
				},
								{
					"name": "keyword.control.select.trilogy",
					"match": "(?i)(?x)\n  \\b(?<!\\.)(\n    select  )\\b\n"
				},
				{
					"name": "keyword.control.flow.trilogy",
					"match": "(?i)(?x)\n  \\b(?<!\\.)(\n   raw_sql | async | continue | select | del | assert | persist | into | break | finally | for\n    | from | elif | else | if | except | pass | raise\n    | return | try | while | with\n  )\\b\n"
				},
				{
					"name": "storage.modifier.declaration.trilogy",
					"match": "(?x)\n  \\b(?<!\\.)(\n    global | nonlocal\n  )\\b\n"
				},
				{
					"name": "storage.type.class.trilogy",
					"match": "\\b(?<!\\.)(class)\\b"
				},
				{
					"match": "(?x)\n  ^\\s*(\n    case | match\n  )(?=\\s*([-+\\w\\d(\\[{'\":#]|$))\\b\n",
					"captures": {
						"1": {
							"name": "keyword.control.flow.trilogy"
						}
					}
				}
			]
		},
		"grain-def-name": {
			"patterns": [
				{
					"include": "#builtin-possible-callables"
				},
				{
					"name": "keyword.control.flow.trilogy",
					"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
				}
			]
		},
		"function-def-name": {
			"patterns": [
				{
					"include": "#builtin-possible-callables"
				},
				{
					"name": "entity.name.function.trilogy",
					"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
				}
			]
		},
		
		"parameters": {
			"name": "meta.function.parameters.trilogy",
			"begin": "(\\()",
			"end": "(\\))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.parameters.begin.trilogy"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.parameters.end.trilogy"
				}
			},
			"patterns": [
				{
					"name": "keyword.operator.positional.parameter.trilogy",
					"match": "/"
				},
				{
					"name": "keyword.operator.unpacking.parameter.trilogy",
					"match": "(\\*\\*|\\*)"
				},
				{
					"include": "#illegal-names"
				},
				{
					"match": "(?x)\n  ([[:alpha:]_]\\w*)\n    \\s* (?: (,) | (?=[)#\\n=]))\n",
					"captures": {
						"1": {
							"name": "variable.parameter.function.language.trilogy"
						},
						"2": {
							"name": "punctuation.separator.parameters.trilogy"
						}
					}
				},
				{
					"include": "#comments"
				},
				{
					"include": "#annotated-parameter"
				}
			]
		},
		"annotated-parameter": {
			"begin": "(?x)\n  \\b\n  ([[:alpha:]_]\\w*) \\s* (:)\n",
			"end": "(,)|(?=\\))",
			"beginCaptures": {
				"1": {
					"name": "variable.parameter.function.language.trilogy"
				},
				"2": {
					"name": "punctuation.separator.annotation.trilogy"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.separator.parameters.trilogy"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"name": "keyword.operator.assignment.trilogy",
					"match": "=(?!=)"
				}
			]
		},
		"expression": {
			"comment": "All valid trilogy expressions",
			"patterns": [
				{
					"include": "#expression-base"
				},
				{
					"include": "#member-access"
				},
				{
					"comment": "Tokenize identifiers to help linters",
					"match": "(?x) \\b ([[:alpha:]_]\\w*) \\b"
				}
			]
		},
		"member-access": {
			"name": "meta.member.access.trilogy",
			"begin": "(\\.)\\s*(?!\\.)",
			"end": "(?x)\n  # stop when you've just read non-whitespace followed by non-word\n  # i.e. when finished reading an identifier or function call\n  (?<=\\S)(?=\\W) |\n  # stop when seeing the start of something that's not a word,\n  # i.e. when seeing a non-identifier\n  (^|(?<=\\s))(?=[^\\\\\\w\\s]) |\n  $\n",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.period.trilogy"
				}
			},
			"patterns": [
				{
					"include": "#function-call"
				},
				{
					"include": "#member-access-base"
				},
				{
					"include": "#member-access-attribute"
				}
			]
		},
		"member-access-attribute": {
			"comment": "Highlight attribute access in otherwise non-specialized cases.",
			"name": "meta.attribute.trilogy",
			"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
		},
		"member-access-base": {
			"patterns": [
				{
					"include": "#magic-names"
				},
				{
					"include": "#illegal-names"
				},
				{
					"include": "#line-continuation"
				},
				{
					"include": "#item-access"
				}
			]
		},
		"item-access": {
			"patterns": [
				{
					"name": "meta.item-access.trilogy",
					"begin": "(?x)\n  \\b(?=\n    [[:alpha:]_]\\w* \\s* \\[\n  )\n",
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.arguments.end.trilogy"
						}
					},
					"patterns": [
						{
							"include": "#item-name"
						},
						{
							"include": "#item-index"
						},
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"item-name": {
			"patterns": [
				{
					"include": "#builtin-functions"
				},
				{
					"name": "meta.indexed-name.trilogy",
					"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
				}
			]
		},
		"item-index": {
			"begin": "(\\[)",
			"end": "(?=\\])",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.begin.trilogy"
				}
			},
			"contentName": "meta.item-access.arguments.trilogy",
			"patterns": [
				{
					"name": "punctuation.separator.slice.trilogy",
					"match": ":"
				},
				{
					"include": "#expression"
				}
			]
		},
		"function-name": {
			"patterns": [
				{
					"include": "#builtin-possible-callables"
				},
				{
					"comment": "Some color schemas support meta.function-call.generic scope",
					"name": "meta.function-call.generic.trilogy",
					"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
				}
			]
		},
		"builtin-possible-callables": {
			"patterns": [
				{
					"include": "#builtin-callables"
				},
				{
					"include": "#magic-names"
				}
			]
		},
		"builtin-callables": {
			"patterns": [
				{
					"include": "#illegal-names"
				},
				{
					"include": "#builtin-functions"
				},
				{
					"include": "#builtin-types"
				}
			]
		},
		"builtin-types": {
			"name": "support.type.trilogy",
			"match": "(?x)\n  (?<!\\.) \\b(\n   string | bool | bytearray | bytes  | float | int | list  |  str | tuple\n  )\\b\n"
		},
		"builtin-functions": {
			"patterns": [
				{
					"name": "support.function.builtin.trilogy",
					"match": "(?x)\n  (?<!\\.) \\b(\n  abs | all | any  |  divmod | where | filter | format | row_number |  hash | id |  len\n    | max |  min | avg | pow   |  round | order | sum | count  )\\b\n"
				}
			]
		},
		"illegal-names": {
			"match": "(?x)\n  \\b(?:\n    (\n      and |  def\n   | del | elif | where | else | for | from |  if | in | is  |  not | or   ) | (\n      as | import\n    )\n  )\\b\n",
			"captures": {
				"1": {
					"name": "keyword.control.flow.trilogy"
				},
				"2": {
					"name": "keyword.control.import.trilogy"
				}
			}
		},
		"magic-names": {
			"patterns": [
				{
					"include": "#magic-function-names"
				},
				{
					"include": "#magic-variable-names"
				}
			]
		},
		"magic-function-names": {
			"comment": "these methods have magic interpretation by trilogy and are generally called\nindirectly through syntactic constructs\n",
			"match": "(?x)\n  \\b(\n    __(?:\n   select |  abs | add  | where | bool | ceil | cmp | coerce | contains | substr  |  delete |  div | divmod | eq\n| float | floor | floordiv | format | ge\n      |  gt\n      | hash | idiv | ifloordiv |\n     | ilshift | imod | imul | index  | ipow\n      | irshift | isub | iter | itruediv | ixor | le\n      | len | long | lshift | lt | missing | mod | mul\n      | ne | neg | new | next | nonzero | oct | or | pos\n      | pow | radd | rand | rdiv | rdivmod | reduce\n      | reduce_ex | repr | reversed | rfloordiv | rlshift | rmod | rmul | ror | round | rpow\n  | rtruediv | rxor | set\n | str | sub   | truediv | trunc | fspath | bytes | prepare | length_hint\n    )__\n  )\\b\n",
			"captures": {
				"1": {
					"name": "support.function.magic.trilogy"
				}
			}
		},
		"magic-variable-names": {
			"comment": "magic variables which a class/module may have.",
			"match": "(?x)\n  \\b(\n    __(?:\n      all | annotations | where | bases | builtins | datasource\n | func\n    | address    | grain    )__\n  )\\b\n",
			"captures": {
				"1": {
					"name": "support.variable.magic.trilogy"
				}
			}
		},
		"function-call": {
			"name": "meta.function-call.trilogy",
			"comment": "Regular function call of the type \"name(args)\"",
			"begin": "(?x)\n  \\b(?=\n    ([[:alpha:]_]\\w*) \\s* (\\()\n  )\n",
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.end.trilogy"
				}
			},
			"patterns": [
				{
					"include": "#function-name"
				},
				{
					"include": "#function-arguments"
				}
			]
		},
		"function-arguments": {
			"begin": "(\\()",
			"end": "(?=\\))(?!\\)\\s*\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.begin.trilogy"
				}
			},
			"contentName": "meta.function-call.arguments.trilogy",
			"patterns": [
				{
					"name": "punctuation.separator.arguments.trilogy",
					"match": "(,)"
				},
				{
					"match": "(?x)\n  (?:(?<=[,(])|^) \\s* (\\*{1,2})\n",
					"captures": {
						"1": {
							"name": "keyword.operator.unpacking.arguments.trilogy"
						}
					}
				},
				{
					"include": "#illegal-names"
				},
				{
					"match": "\\b([[:alpha:]_]\\w*)\\s*(=)(?!=)",
					"captures": {
						"1": {
							"name": "variable.parameter.function-call.trilogy"
						},
						"2": {
							"name": "keyword.operator.assignment.trilogy"
						}
					}
				},
				{
					"name": "keyword.operator.assignment.trilogy",
					"match": "=(?!=)"
				},
				{
					"include": "#expression"
				},
				{
					"match": "\\s*(\\))\\s*(\\()",
					"captures": {
						"1": {
							"name": "punctuation.definition.arguments.end.trilogy"
						},
						"2": {
							"name": "punctuation.definition.arguments.begin.trilogy"
						}
					}
				}
			]
		},
		"expression-base": {
			"comment": "valid trilogy expressions with comments and line continuation",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#expression-bare"
				},
				{
					"include": "#line-continuation"
				}
			]
		},
		"list": {
			"begin": "\\[",
			"end": "\\]",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.list.begin.trilogy"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.list.end.trilogy"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"concept-list": {
			"begin": "<",
			"end": ">",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.list.begin.trilogy"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.list.end.trilogy"
				}
			},
			"patterns": [
				{
					"include": "#function-def-name"
				}
			]
		},
		"number-float": {
			"name": "constant.numeric.float.trilogy",
			"match": "(?x)\n  (?<! \\w)(?:\n    (?:\n      \\.[0-9](?: _?[0-9] )*\n      |\n      [0-9](?: _?[0-9] )* \\. [0-9](?: _?[0-9] )*\n      |\n      [0-9](?: _?[0-9] )* \\.\n    ) (?: [eE][+-]?[0-9](?: _?[0-9] )* )?\n    |\n    [0-9](?: _?[0-9] )* (?: [eE][+-]?[0-9](?: _?[0-9] )* )\n  )([jJ])?\\b\n",
			"captures": {
				"1": {
					"name": "storage.type.imaginary.number.trilogy"
				}
			}
		},
		"number-dec": {
			"name": "constant.numeric.dec.trilogy",
			"match": "(?x)\n  (?<![\\w\\.])(?:\n      [1-9](?: _?[0-9] )*\n      |\n      0+\n      |\n      [0-9](?: _?[0-9] )* ([jJ])\n      |\n      0 ([0-9]+)(?![eE\\.])\n  )\\b\n",
			"captures": {
				"1": {
					"name": "storage.type.imaginary.number.trilogy"
				},
				"2": {
					"name": "invalid.illegal.dec.trilogy"
				}
			}
		},
		"number": {
			"name": "constant.numeric.trilogy",
			"patterns": [
				{
					"include": "#number-float"
				},
				{
					"include": "#number-dec"
				},
				{
					"include": "#number-long"
				},
				{
					"name": "invalid.illegal.name.trilogy",
					"match": "\\b[0-9]+\\w+"
				}
			]
		},
		"number-long": {
			"name": "constant.numeric.bin.trilogy",
			"comment": "this is to support trilogy2 syntax for long ints",
			"match": "(?x)\n  (?<![\\w\\.])\n    ([1-9][0-9]* | 0) ([lL])\n  \\b\n",
			"captures": {
				"2": {
					"name": "storage.type.number.trilogy"
				}
			}
		},
		"literal": {
			"patterns": [
				{
					"name": "constant.language.trilogy",
					"match": "\\b(True|False|None|NotImplemented|Ellipsis)\\b"
				},
				{
					"include": "#number"
				}
			]
		},
		"illegal-operator": {
			"patterns": [
				{
					"name": "invalid.illegal.operator.trilogy",
					"match": "&&|\\|\\||--|\\+\\+"
				},
				{
					"name": "invalid.illegal.operator.trilogy",
					"match": "[?$]"
				},
				{
					"name": "invalid.illegal.operator.trilogy",
					"comment": "We don't want `!` to flash when we're typing `!=`",
					"match": "!\\b"
				}
			]
		},
		"operator": {
			"match": "(?x)\n    \\b(?<!\\.)\n      (?:\n        (and | or | not | in | is)                         (?# 1)\n        |\n        (for | if | else | await | (?:yield(?:\\s+from)?))  (?# 2)\n      )\n    (?!\\s*:)\\b\n\n    | (<< | >> | & | \\| | \\^ | ~)                          (?# 3)\n\n    | (\\*\\* | \\* | \\+ | - | % | // | / | @)                (?# 4)\n\n    | (!= | == | >= | <= | < | >)                          (?# 5)\n\n    | (:=)                                                 (?# 6)\n",
			"captures": {
				"1": {
					"name": "keyword.operator.logical.trilogy"
				},
				"2": {
					"name": "keyword.control.flow.trilogy"
				},
				"3": {
					"name": "keyword.operator.bitwise.trilogy"
				},
				"4": {
					"name": "keyword.operator.arithmetic.trilogy"
				},
				"5": {
					"name": "keyword.operator.comparison.trilogy"
				},
				"6": {
					"name": "keyword.operator.assignment.trilogy"
				}
			}
		},
		"round-braces": {
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.begin.trilogy"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.end.trilogy"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"expression-bare": {
			"comment": "valid trilogy expressions w/o comments and line continuation",
			"patterns": [
				{
					"include": "#literal"
				},
				{
					"include": "#string"
				},
				{
					"include": "#illegal-operator"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#item-access"
				},
				{
					"include": "#list"
				},
				{
					"include": "#odd-function-call"
				},
				{
					"include": "#round-braces"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#builtin-functions"
				},
				{
					"include": "#builtin-types"
				},
				{
					"include": "#magic-names"
				},
				{
					"include": "#punctuation"
				},
				{
					"include": "#line-continuation"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.separator.colon.trilogy",
					"match": ":"
				},
				{
					"name": "punctuation.separator.element.trilogy",
					"match": ","
				}
			]
		},
		"odd-function-call": {
			"comment": "A bit obscured function call where there may have been an\narbitrary number of other operations to get the function.\nE.g. \"arr[idx](args)\"\n",
			"begin": "(?x)\n  (?<= \\] | \\) ) \\s*\n  (?=\\()\n",
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.end.trilogy"
				}
			},
			"patterns": [
				{
					"include": "#function-arguments"
				}
			]
		},
		"line-continuation": {
			"patterns": [
				{
					"match": "(\\\\)\\s*(\\S.*$\\n?)",
					"captures": {
						"1": {
							"name": "punctuation.separator.continuation.line.trilogy"
						},
						"2": {
							"name": "invalid.illegal.line.continuation.trilogy"
						}
					}
				},
				{
					"begin": "(\\\\)\\s*$\\n?",
					"end": "(?x)\n  (?=^\\s*$)\n  |\n  (?! (\\s* [rR]? (\\'\\'\\'|\\\"\\\"\\\"|\\'|\\\"))\n      |\n      (\\G $)  (?# '\\G' is necessary for ST)\n  )\n",
					"beginCaptures": {
						"1": {
							"name": "punctuation.separator.continuation.line.trilogy"
						}
					},
					"patterns": [
						{
							"include": "#string"
						}
					]
				}
			]
		},
		"string": {
			"patterns": [
				{
					"include": "#string-quoted-multi-line"
				},
				{
					"include": "#string-quoted-single-line"
				}
			]
		},
		"string-quoted-multi-line": {
			"name": "string.quoted.multi.trilogy",
			"begin": "(?:\\b([rR])(?=[uU]))?([uU])?('''|\"\"\")",
			"end": "(\\3)",
			"beginCaptures": {
				"1": {
					"name": "invalid.illegal.prefix.trilogy"
				},
				"2": {
					"name": "storage.type.string.trilogy"
				},
				"3": {
					"name": "punctuation.definition.string.begin.trilogy"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.trilogy"
				},
				"2": {
					"name": "invalid.illegal.newline.trilogy"
				}
			},
			"patterns": [
				{
					"include": "#string-unicode-guts"
				}
			]
		},
		"string-quoted-single-line": {
			"name": "string.quoted.single.trilogy",
			"begin": "(?:\\b([rR])(?=[uU]))?([uU])?((['\"]))",
			"end": "(\\3)|((?<!\\\\)\\n)",
			"beginCaptures": {
				"1": {
					"name": "invalid.illegal.prefix.trilogy"
				},
				"2": {
					"name": "storage.type.string.trilogy"
				},
				"3": {
					"name": "punctuation.definition.string.begin.trilogy"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.trilogy"
				},
				"2": {
					"name": "invalid.illegal.newline.trilogy"
				}
			},
			"patterns": [
				{
					"include": "#string-unicode-guts"
				}
			]
		},
		"string-unicode-guts": {
			"patterns": [
				{
					"include": "#string-entity"
				}
			]
		},
		"string-entity": {
			"patterns": [
				{
					"include": "#string-line-continuation"
				}
			]
		},
		"string-line-continuation": {
			"name": "constant.language.trilogy",
			"match": "\\\\$"
		}
	},
	"scopeName": "source.trilogy"
}